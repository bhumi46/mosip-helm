apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}-preinstall"
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-failed"
spec:
  template:
    metadata:
      name: "{{.Release.Name}}-preinstall"
      namespace: {{ .Release.Namespace }}
      labels:
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: "{{.Release.Name }}-preinstall"
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: {{ include "keygen.serviceAccountName" . }}
      restartPolicy: Never
      containers:
      - name: pre-install-job
        image: bitnami/kubectl:1.26.8
        command:
        - /bin/bash
        - -c
        - |
            #!/bin/bash
            # Copy configmaps and secrets from other namespaces
            echo Istio label
            kubectl label ns {{ .Release.Namespace }} istio-injection=enabled --overwrite
            # Function to copy ConfigMaps or Secrets
            function copy_resource() {
              local RESOURCE_TYPE="$1"
              local RESOURCE_NAME="$2"
              local SOURCE_NAMESPACE="$3"
              local DESTINATION_NAMESPACE="$4"
              local NEW_NAME="${5:-$RESOURCE_NAME}" 

              if [ "$RESOURCE_TYPE" = "configmap" ]; then
                RESOURCE="configmap"
              elif [ "$RESOURCE_TYPE" = "secret" ]; then
                RESOURCE="secret"
              else
                echo "Incorrect resource type: $RESOURCE_TYPE. Exiting..."
                exit 1
              fi

              if [ "$NEW_NAME" != "$RESOURCE_NAME" ]; then
                kubectl -n "$DESTINATION_NAMESPACE" delete --ignore-not-found=true "$RESOURCE" "$NEW_NAME"
                kubectl -n "$SOURCE_NAMESPACE" get "$RESOURCE" "$RESOURCE_NAME" -o yaml | \
                  sed "s/namespace: $SOURCE_NAMESPACE/namespace: $DESTINATION_NAMESPACE/g" | \
                  sed "s/name: $RESOURCE_NAME/name: $NEW_NAME/g" | kubectl -n "$DESTINATION_NAMESPACE" create -f -
              else
                kubectl -n "$DESTINATION_NAMESPACE" delete --ignore-not-found=true "$RESOURCE" "$RESOURCE_NAME"
                kubectl -n "$SOURCE_NAMESPACE" get "$RESOURCE" "$RESOURCE_NAME" -o yaml | \
                  sed "s/namespace: $SOURCE_NAMESPACE/namespace: $DESTINATION_NAMESPACE/g" | \
                  kubectl -n "$DESTINATION_NAMESPACE" create -f -
              fi
            }

            # Function to copy multiple ConfigMaps and Secrets
            function copy_resources() {
              # Copy ConfigMaps
              copy_resource "configmap" "global" "default" "{{ .Release.Namespace }}"
              copy_resource "configmap" "artifactory-share" "artifactory" "{{ .Release.Namespace }}"
              copy_resource "configmap" "config-server-share" "config-server" "{{ .Release.Namespace }}"
              copy_resource "configmap" "softhsm-kernel-share" "softhsm" "{{ .Release.Namespace }}"
              copy_resource "configmap" "softhsm-ida-share" "softhsm" "{{ .Release.Namespace }}"
            }

            # Error handling settings
            set -e
            set -o errexit
            set -o nounset
            set -o errtrace
            set -o pipefail

            copy_resources
