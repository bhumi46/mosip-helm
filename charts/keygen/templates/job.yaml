apiVersion: batch/v1
kind: Job
metadata:
  name: pre-install-job
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-1"
spec:
  template:
    metadata:
      name: pre-install-job
      namespace: {{ .Release.Namespace }}
      labels:
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: {{ template "keygen.serviceAccountName" . }}
      restartPolicy: Never
      containers:
      - name: pre-install-job
        image: bitnami/kubectl:1.22.9
        command:
        - /bin/bash
        - -c
        - |
            #!/bin/bash
            # Function to label the namespace with Istio injection
            function label_namespace_with_istio_injection() {
              local NS="$1"
              echo "Labeling namespace $NS with Istio injection"
              kubectl label ns "$NS" istio-injection=enabled --overwrite
            }

            # Label the namespace with Istio injection for the destination namespace
            label_namespace_with_istio_injection "{{ .Release.Namespace }}"
            # Copy configmaps and secrets from other namespaces
            # Function to copy ConfigMaps or Secrets
            function copy_resource() {
              local RESOURCE_TYPE="$1"
              local RESOURCE_NAME="$2"
              local SOURCE_NAMESPACE="$3"
              local DESTINATION_NAMESPACE="$4"
              local NEW_NAME="${5:-$RESOURCE_NAME}" 

              if [ "$RESOURCE_TYPE" = "configmap" ]; then
                RESOURCE="configmap"
              elif [ "$RESOURCE_TYPE" = "secret" ]; then
                RESOURCE="secret"
              else
                echo "Incorrect resource type: $RESOURCE_TYPE. Exiting..."
                exit 1
              fi

              if [ "$NEW_NAME" != "$RESOURCE_NAME" ]; then
                kubectl -n "$DESTINATION_NAMESPACE" delete --ignore-not-found=true "$RESOURCE" "$NEW_NAME"
                kubectl -n "$SOURCE_NAMESPACE" get "$RESOURCE" "$RESOURCE_NAME" -o yaml | \
                  sed "s/namespace: $SOURCE_NAMESPACE/namespace: $DESTINATION_NAMESPACE/g" | \
                  sed "s/name: $RESOURCE_NAME/name: $NEW_NAME/g" | kubectl -n "$DESTINATION_NAMESPACE" create -f -
              else
                kubectl -n "$DESTINATION_NAMESPACE" delete --ignore-not-found=true "$RESOURCE" "$RESOURCE_NAME"
                kubectl -n "$SOURCE_NAMESPACE" get "$RESOURCE" "$RESOURCE_NAME" -o yaml | \
                  sed "s/namespace: $SOURCE_NAMESPACE/namespace: $DESTINATION_NAMESPACE/g" | \
                  kubectl -n "$DESTINATION_NAMESPACE" create -f -
              fi
            }

            # Function to copy multiple ConfigMaps and Secrets
            function copy_resources() {
              # Copy ConfigMaps
              copy_resource "configmap" "global" "default" "{{ .Release.Namespace }}"
              copy_resource "configmap" "config-server-share" "config-server" "{{ .Release.Namespace }}"
              copy_resource "configmap" "artifactory-share" "artifactory" "{{ .Release.Namespace }}"
              copy_resource "configmap" "softhsm-kernel-share" "softhsm" "{{ .Release.Namespace }}"
              copy_resource "configmap" "softhsm-ida-share" "softhsm" "{{ .Release.Namespace }}"
            }

            # Error handling settings
            set -e
            set -o errexit
            set -o nounset
            set -o errtrace
            set -o pipefail

            copy_resources

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "common.names.fullname" . }}
  labels: 
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  annotations:
    "helm.sh/hook-delete-policy": hook-succeeded
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
    
spec:
  backoffLimit: {{ .Values.backoffLimit }}
  template:
    metadata:
      labels: 
        {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
        sidecar.istio.io/inject: "false"
    spec:
      {{- include "keygen.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
        {{- if .Values.podSecurityContext.sysctls }}
        sysctls:
          {{- toYaml .Values.podSecurityContext.sysctls | nindent 8 }}
        {{- end }}
      {{- end }}
      serviceAccountName: {{ include "keygen.serviceAccountName" . }}
      restartPolicy: Never  # This is one time job
      containers:
        - name: keygen
          image: {{ template "keygen.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: container_user
              value: {{ .Values.containerSecurityContext.runAsUser }}
            - name: JDK_JAVA_OPTIONS
              value: {{ .Values.additionalResources.javaOpts }}
            - name: spring_config_name_env
              value: {{ .Values.springConfigNameEnv }}
          {{- if .Values.extraEnvVars }}
          {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
          {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            {{- range .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ . }}
            {{- end }}
            {{- end }}
            - configMapRef:
                name: {{ .Values.softHsmCM }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
